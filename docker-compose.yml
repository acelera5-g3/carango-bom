version: '3.7'

# Define services
services:
  # App backend service
  api:
    # Configuration for building the docker image for the backend service
    build:
      context: api # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      DATABASE_URL: jdbc:mysql://db:3306/carangobom
      DATABASE_USER: root
      DATABASE_PASSWORD:
      SPRING_PROFILES_ACTIVE: prod
      PORT: 8080
      JWT_SECRET: 9ac7ff63ea6f3d3607d20f6f4e900547
      FRONT_URL:
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service
  web:
    build:
      context: web # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080
    ports:
      - "9090:80" # Map the exposed port 80 on the container to port 9090 on the host machine
    restart: always
    depends_on:
      - api
    networks:
      - frontend

  # Database Service (Mysql)
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'carangobom'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: ''
      # Password for root access
      MYSQL_ROOT_PASSWORD: ''
      MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
      MYSQL_ROOT_HOST: '%'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend: